const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

const folders = ['artifacts', 'typechain-types'];
const configFiles = ['hardhat.config.cjs', 'hardhat.config.js'];

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
const configPath = configFiles.find(file => fs.existsSync(path.join(process.cwd(), file)));

if (!configPath) {
  console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: hardhat.config.cjs –∏–ª–∏ hardhat.config.js');
  process.exit(1);
}

// üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–æ–∫
function checkFolder(folder) {
  const fullPath = path.join(process.cwd(), folder);
  return fs.existsSync(fullPath) && fs.lstatSync(fullPath).isDirectory();
}

const missingFolders = folders.filter(folder => !checkFolder(folder));

if (missingFolders.length === 0) {
  console.log('‚úÖ –í—Å–µ –ø–∞–ø–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ' + folders.join(', '));
  process.exit(0);
}

console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏:', missingFolders.join(', '));
console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é Hardhat...');

const compile = exec('npx hardhat compile');

compile.stdout.on('data', data => process.stdout.write(data));
compile.stderr.on('data', data => process.stderr.write(data));

compile.on('close', code => {
  if (code === 0) {
    console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    folders.forEach(folder => {
      if (checkFolder(folder)) {
        console.log(`üì¶ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${folder}/`);
      } else {
        console.log(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: ${folder}/`);
      }
    });

    // üîß –ó–∞–ø—É—Å–∫ TypeChain
    console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TypeChain...');
    const typechain = exec('npx typechain --target ethers-v6 --out-dir typechain-types');

    typechain.stdout.on('data', data => process.stdout.write(data));
    typechain.stderr.on('data', data => process.stderr.write(data));

    typechain.on('close', tcCode => {
      if (tcCode === 0) {
        console.log('‚úÖ TypeChain –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
      } else {
        console.log(`‚ùå TypeChain –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥: ${tcCode}`);
      }
    });

  } else {
    console.log(`‚ùå –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥: ${code}`);
  }
});